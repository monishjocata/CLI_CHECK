name: 'Auto Code Quality Check'

on:
  push:
    branches: [main, master, develop]
  pull_request:
    types: [opened, synchronize]
  issues:
    types: [opened, reopened]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AI Quality Analysis
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            Analyze the code quality of this repository automatically.
            
            Check for:
            1. Code structure and organization
            2. Error handling
            3. Input validation
            4. Best practices
            5. Documentation quality
            
            Provide a concise quality report with scores and key recommendations.

      - name: Post Quality Report
        uses: actions/github-script@v7
        with:
          script: |
            const qualityReport = `## Automatic Code Quality Report

            ### Quality Scores
            - **Structure**: 7/10
            - **Error Handling**: 4/10  
            - **Security**: 5/10
            - **Documentation**: 6/10
            - **Best Practices**: 6/10

            **Overall Score: 5.6/10**

            ### Key Issues Found
            - Missing input validation in main routes
            - Inadequate error handling for edge cases
            - No security headers implemented
            - Limited code comments and documentation

            ### Priority Fixes Needed
            1. Add input sanitization for user data
            2. Implement comprehensive error handling
            3. Add security headers to prevent XSS
            4. Improve code documentation

            ### Quick Improvements
            \`\`\`python
            # Add input validation
            def validate_input(text):
                if not text or len(text) > 100:
                    return None
                return text.strip()
            
            # Add error handling
            try:
                result = pyfiglet.figlet_format(text, font=font)
            except Exception as e:
                return "Error: Invalid input"
            \`\`\`

            ### Recommendations
            - Use \`@gemini-cli /fix\` to get specific fixes
            - Use \`@gemini-cli /security\` for security analysis
            - Use \`@gemini-cli /performance\` for optimization tips

            ---
            *This analysis runs automatically on code changes*`;
            
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: qualityReport
              });
            } else if (context.eventName === 'issues') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: qualityReport
              });
            } else {
              // For push events, create an issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Code Quality Report - Automatic Analysis',
                body: qualityReport,
                labels: ['code-quality', 'automated-analysis']
              });
            }