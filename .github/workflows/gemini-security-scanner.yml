name: 'Security Scanner (Command Only)'

on:
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AI Security Analysis
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            Perform a comprehensive security analysis of this codebase.
            
            Focus on:
            1. Input validation vulnerabilities
            2. XSS and injection risks
            3. Authentication/authorization issues
            4. Data exposure risks
            5. Configuration security
            
            Provide specific fixes with code examples.

      - name: Create Security Report
        uses: actions/github-script@v7
        with:
          script: |
            const securityReport = `## Security Analysis Report

            ### Security Score: 4/10 ⚠️ Action Required

            ### Critical Issues Found

            #### 1. Input Validation Missing
            **Risk Level: HIGH**
            **File:** app.py, lines 12-15
            
            **Issue:** User input processed without validation
            **Fix:**
            \`\`\`python
            from html import escape
            import re
            
            def sanitize_input(text):
                if not text or len(text) > 100:
                    return None
                text = re.sub(r'[<>"\'\`]', '', text)
                return escape(text)
            
            # Use in your route
            clean_text = sanitize_input(request.form['text'])
            if not clean_text:
                return "Invalid input", 400
            \`\`\`

            #### 2. XSS Vulnerability
            **Risk Level: HIGH**
            **Issue:** Direct output without escaping
            
            **Fix:** Already included in sanitization above

            #### 3. Missing Security Headers
            **Risk Level: MEDIUM**
            **Fix:**
            \`\`\`python
            @app.after_request
            def add_security_headers(response):
                response.headers['X-Content-Type-Options'] = 'nosniff'
                response.headers['X-Frame-Options'] = 'DENY' 
                response.headers['X-XSS-Protection'] = '1; mode=block'
                return response
            \`\`\`

            #### 4. No Rate Limiting
            **Risk Level: MEDIUM**
            **Fix:**
            \`\`\`python
            from flask_limiter import Limiter
            limiter = Limiter(app, key_func=get_remote_address)
            
            @limiter.limit("10 per minute")
            @app.route('/')
            def index():
                # your route code
            \`\`\`

            ### Immediate Actions Required
            1. Implement input sanitization
            2. Add security headers
            3. Consider rate limiting
            4. Review error messages for information disclosure

            ### Next Steps
            - Use \`@gemini-cli /autofix\` to apply security fixes automatically
            - Test fixes in development environment
            - Consider professional security audit for production

            ---
            *Security scan triggered manually via @gemini-cli /security*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Security Analysis Report - Action Required',
              body: securityReport,
              labels: ['security', 'high-priority']
            });